#include <LiquidCrystal.h>
#include "Arduino.h"
#include "lin.h"
#include <SPI.h>
#include <SD.h>

//Definición de los pines para el LCD
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

//Definición del pin para la tarjeta SD
#define SD_CS_PIN 10

File dataFile;

//Definiciones para los pines del transceptor LIN
#define LIN_TRX_CS_PIN 8
#define LIN_TRX_FAULT_PIN 7

//Versión del protocolo LIN
uint8_t LIN_BUS_PROTOCOL_VERSION = 2;

//Instancia del bus LIN
Lin LIN_BUS;

//ID del Frame del comando de velocidad de la bomba
uint8_t COMMAND_MECPA_LIN_ID  = 0x28;

//Longitud del Frame de comando de velocidad de la bomba
uint8_t COMMAND_MECPA_LIN_LENGTH = 2;

//Señal de comando de velocidad de la bomba
uint8_t CMD_TGT_RPM_PUMP_MECPA =  0x00;
uint8_t CMD_Mode_PUMP_Rq_MECPA_CMD_Reset_Rq_MECPA = 0x00;

//Frame de comando de velocidad de la bomba
uint8_t COMMAND_MECPA_LIN [] = { CMD_TGT_RPM_PUMP_MECPA, CMD_Mode_PUMP_Rq_MECPA_CMD_Reset_Rq_MECPA};

void setup() {
  // Configurar el LCD con 16 columnas y 2 filas
  lcd.begin(16, 2);
  lcd.print("Ford LIN Manual");
  lcd.setCursor(0, 1);
  lcd.print("Speed Value:");
  lcd.setCursor(13, 1);
  lcd.print("0   ");

  // Indicar que el programa está corriendo
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH);

  // Configuración de los pines del transceptor LIN
  pinMode(LIN_TRX_CS_PIN, OUTPUT);
  digitalWrite(LIN_TRX_CS_PIN, HIGH);
  pinMode(LIN_TRX_FAULT_PIN, OUTPUT);
  digitalWrite(LIN_TRX_FAULT_PIN, HIGH);    

  // Configurar la tasa de baudios para el bus LIN
  LIN_BUS.begin(10417);

  // Inicializar la tarjeta SD
  if (!SD.begin(SD_CS_PIN)) {
    lcd.setCursor(0, 0);
    lcd.print("SD Init failed!");
    return;
  }
  lcd.setCursor(0, 0);
  lcd.print("SD Init success");
}

void loop() {
  lcd.setCursor(13, 1);

  // Incrementar o decrementar el valor de la velocidad de la bomba
  if (analogRead(btnRIGHT) == HIGH) {
    CMD_TGT_RPM_PUMP_MECPA++;   
    if (CMD_TGT_RPM_PUMP_MECPA > 0xFF) {
      CMD_TGT_RPM_PUMP_MECPA = 0x00;
      lcd.print("0  ");
    }
  } else if (analogRead(btnLEFT) == HIGH) {
    CMD_TGT_RPM_PUMP_MECPA--; 
    if (CMD_TGT_RPM_PUMP_MECPA < 0x00) {
      CMD_TGT_RPM_PUMP_MECPA = 0xFF;
      lcd.print("255");
    }
  }

  // Mostrar el valor actual de la velocidad
  lcd.print(CMD_TGT_RPM_PUMP_MECPA, DEC);

  // Enviar el comando LIN con la nueva velocidad
  COMMAND_MECPA_LIN[0] = CMD_TGT_RPM_PUMP_MECPA;
  LIN_BUS.send(COMMAND_MECPA_LIN_ID, COMMAND_MECPA_LIN, COMMAND_MECPA_LIN_LENGTH, LIN_BUS_PROTOCOL_VERSION);

  // Guardar la retroalimentación en el datalogger
  dataFile = SD.open("datalog.txt", FILE_WRITE);
  if (dataFile) {
    dataFile.print("Velocidad: ");
    dataFile.println(CMD_TGT_RPM_PUMP_MECPA, DEC);
    dataFile.close(); // Cerrar el archivo para guardar los datos
  } else {
    lcd.setCursor(0, 0);
    lcd.print("Error escribiendo SD");
  }

  delay(100);
}

